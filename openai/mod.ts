import type { ResponseFormatJSONSchema } from "openai/resources/shared";
import {
  type AutoParseableResponseFormat,
  makeParseableResponseFormat,
} from "openai/lib/parser";
import type typia from "typia";

type Primitive<T> = typia.Primitive<T>;

/**
 * Params for `typiaJsonToOpenAIJsonSchema` and `typiaJsonToOpenAIResponse`
 */
export interface TypiaJsonToOpenAIJsonSchemaParams<T> {
  /**
   * JSON Schema generated by Typia.
   */
  jsonSchema: ReturnType<typeof typia.json.application<[T]>>;

  /**
   * Whether to enable strict schema adherence when generating the output. If set to
   * true, the model will always follow the exact schema defined in the `schema`
   * field. Only a subset of JSON Schema is supported when `strict` is `true`. To
   * learn more, read the
   * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).
   */
  strict?: boolean | null;
}

/**
 * Params for `typiaResponseFormat`
 */
export interface TypiaResponseFormatParams<T>
  extends TypiaJsonToOpenAIJsonSchemaParams<T> {
  /**
   * An assertParse function generated by Typia.
   */
  assertParse: ReturnType<typeof typia.json.createAssertParse<T>>;
}

/**
 * Converts JSON Schema generated by Typia to OpenAI JSON Schema.
 * Recommended to use `typiaResponseFormat` instead.
 * @see [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).
 */
export function typiaJsonToOpenAIJsonSchema<T>(
  { jsonSchema, strict }: TypiaJsonToOpenAIJsonSchemaParams<T>,
): ResponseFormatJSONSchema.JSONSchema {
  const { schemas } = jsonSchema.components;

  if (schemas == null) {
    throw new Error("json_schema.components.schemas is null");
  }

  const name = Object.keys(schemas).at(0);

  if (name == null) {
    throw new Error("name is null");
  }

  const targetSchema = schemas[name];

  return {
    name,
    schema: targetSchema as Record<string, unknown>,
    description: targetSchema.description,
    strict,
  };
}

/**
 * Converts JSON Schema generated by Typia to OpenAI ResponseFormat for Structured Outputs.
 * recommended to use this function instead of `typiaResponseFormat` instead.
 * @see [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).
 *
 * @example
 * ```ts
 * import { typiaJsonToOpenAIResponse } from "@ryoppippi/typiautil/openai";
 * import typia, { tags } from "typia";
 * import OpenAI from "openai";
 *
 * type Output = {
 *   id: string & tags.Type<'uint32'>;
 *
 *   name: string & tags.MinLength<1>;
 * }
 *
 *  const client = new OpenAI({})
 *
 *  const jsonSchema = typia.json.application<[Output]>();
 *  const chat = await client.beta.chat.completions.parse({
 *   model: "gpt-4o-mini",
 *   response_format: typiaJsonToOpenAIResponse({ jsonSchema }),
 *   messages: [
 *     {
 *       role: "system",
 *      content: "Extract information and return as the structured data following schema",
 *     },
 *   ],
 *  });
 * const json = typia.json.validateParse<Output>(chat.choices.at(0)?.message.content as string)
 * ```
 */
export function typiaJsonToOpenAIResponse<T>(
  params: TypiaJsonToOpenAIJsonSchemaParams<T>,
): ResponseFormatJSONSchema {
  return {
    type: "json_schema",
    json_schema: typiaJsonToOpenAIJsonSchema(params),
  };
}

/**
 * Creates an AutoParseableResponseFormat for OpenAI API from Typia JSON Schema.
 * @see [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).
 *
 * @example
 * ```ts
 * import { typiaResponseFormat } from "@ryoppippi/typiautil/openai";
 * import typia, { tags } from "typia";
 * import OpenAI from "openai";
 *
 * type Output = {
 *   id: string & tags.Type<'uint32'>;
 *   name: string & tags.MinLength<1>;
 * }
 *
 *  const client = new OpenAI({})
 *
 *  const completion = await client.beta.chat.completions.parse({
 *   model: "gpt-4o-mini",
 *   response_format: typiaResponseFormat({
 *     jsonSchema: typia.json.application<[Output]>(),
 *     assertParse: typia.json.createAssertParse<Output>(),
 *   }),
 *   messages: [
 *     {
 *       role: "system",
 *      content: "Extract information and return as the structured data following schema",
 *     },
 *   ],
 *  });
 *
 * console.log(completion.choices[0].message.parsed);
 * ```
 */
export function typiaResponseFormat<T>(
  params: TypiaResponseFormatParams<T>,
): AutoParseableResponseFormat<Primitive<T>> {
  type ParsedT = Primitive<T>;

  const response = typiaJsonToOpenAIResponse(params);

  return makeParseableResponseFormat<ParsedT>(response, params.assertParse);
}
