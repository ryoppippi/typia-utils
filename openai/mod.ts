import type { ResponseFormatJSONSchema } from "openai/resources/shared";
import {
  type AutoParseableResponseFormat,
  makeParseableResponseFormat,
  makeParseableTool,
} from "openai/lib/parser";
import type typia from "typia";

type Primitive<T> = typia.Primitive<T>;

/**
 * Params for `typiaJsonToOpenAIJsonSchema` and `typiaJsonToOpenAIResponse`
 */
export interface TypiaJsonToOpenAIJsonSchemaParams<T> {
  /**
   * JSON Schema generated by Typia.
   * @see [`application()` function](https://typia.io/docs/json/schema/)
   */
  jsonSchema: ReturnType<typeof typia.json.application<[T], "3.0" | "3.1">>;

  /**
   * Whether to enable strict schema adherence when generating the output. If set to
   * true, the model will always follow the exact schema defined in the `schema`
   * field. Only a subset of JSON Schema is supported when `strict` is `true`. To
   * learn more, read the
   * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).
   * @default true
   */
  strict?: boolean | null;
}

/**
 * Params for `typiaResponseFormat`
 */
export interface TypiaResponseFormatParams<T>
  extends TypiaJsonToOpenAIJsonSchemaParams<T> {
  /**
   * A validate function generated by Typia.
   * @see [`validate()` function](https://typia.io/docs/validators/validate/)
   */
  validate: (input: unknown) => typia.IValidation<T>;
}

/**
 * Params for `typiaFunction`
 */
export interface TypiaFunctionParams<T> extends TypiaResponseFormatParams<T> {
  /**
   * Description of the function.
   * if not specified, it will be the same as the description of the JSON Schema.
   */
  description?: string;

  /**
   * A function that will be called when the model calls the function.
   */
  function?: ((args: T) => unknown | Promise<unknown>) | undefined;
}

/**
 * Converts JSON Schema generated by Typia to OpenAI JSON Schema.
 * Recommended to use `typiaResponseFormat` instead.
 * @see [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).
 */
export function typiaJsonToOpenAIJsonSchema<T>(
  { jsonSchema, strict }: TypiaJsonToOpenAIJsonSchemaParams<T>,
): ResponseFormatJSONSchema.JSONSchema {
  const { schemas } = jsonSchema.components;

  if (schemas == null) {
    throw new Error("json_schema.components.schemas is null");
  }

  const name = Object.keys(schemas).at(0);

  if (name == null) {
    throw new Error("name is null");
  }

  const targetSchema = schemas[name];

  return {
    name,
    schema: targetSchema as Record<string, unknown>,
    description: targetSchema.description,
    strict: strict ?? true,
  };
}

/**
 * Converts JSON Schema generated by Typia to OpenAI ResponseFormat for Structured Outputs.
 * recommended to use this function instead of `typiaResponseFormat` instead.
 * @see [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).
 *
 * @example
 * ```ts
 * import { typiaJsonToOpenAIResponse } from "@ryoppippi/typiautil/openai";
 * import typia, { tags } from "typia";
 * import OpenAI from "openai";
 *
 * type Output = {
 *   id: string & tags.Type<'uint32'>;
 *
 *   name: string & tags.MinLength<1>;
 * }
 *
 *  const client = new OpenAI({})
 *
 *  const jsonSchema = typia.json.application<[Output]>();
 *  const chat = await client.beta.chat.completions.parse({
 *   model: "gpt-4o-mini",
 *   response_format: typiaJsonToOpenAIResponse({ jsonSchema }),
 *   messages: [
 *     {
 *       role: "system",
 *      content: "Extract information and return as the structured data following schema",
 *     },
 *   ],
 *  });
 * const json = typia.json.validateParse<Output>(chat.choices.at(0)?.message.content as string)
 * ```
 */
export function typiaJsonToOpenAIResponse<T>(
  params: TypiaJsonToOpenAIJsonSchemaParams<T>,
): ResponseFormatJSONSchema {
  return {
    type: "json_schema",
    json_schema: typiaJsonToOpenAIJsonSchema(params),
  };
}

/**
 * Creates an AutoParseableResponseFormat for OpenAI API from Typia JSON Schema.
 * @see [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).
 *
 * @example
 * ```ts
 * import { typiaResponseFormat } from "@ryoppippi/typiautil/openai";
 * import typia, { tags } from "typia";
 * import OpenAI from "openai";
 *
 * type Output = {
 *   id: string & tags.Type<'uint32'>;
 *   name: string & tags.MinLength<1>;
 * }
 *
 *  const client = new OpenAI({})
 *
 *  const completion = await client.beta.chat.completions.parse({
 *   model: "gpt-4o-mini",
 *   response_format: typiaResponseFormat({
 *     jsonSchema: typia.json.application<[Output]>(),
 *     validate: typia.createValidate<Output>(), // or typia.createValidateEquals<Output>()
 *   }),
 *   messages: [
 *     {
 *       role: "system",
 *      content: "Extract information and return as the structured data following schema",
 *     },
 *   ],
 *  });
 *
 * console.log(completion.choices[0].message.parsed);
 * ```
 */
export function typiaResponseFormat<T>(
  params: TypiaResponseFormatParams<T>,
): AutoParseableResponseFormat<Primitive<T>> {
  type ParsedT = Primitive<T>;

  const response = typiaJsonToOpenAIResponse(params);

  const parse = (s: string) => {
    const json = JSON.parse(s);

    const result = params.validate(json);
    if (!result.success) {
      throw new Error(`${result.errors.toString()}`);
    }
    return json;
  };

  return makeParseableResponseFormat<ParsedT>(response, parse);
}

/**
 * Creates an AutoParseableTool for OpenAI API from Typia JSON Schema.
 * @see [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).
 *
 * @example
 * ```ts
 * import { typiaFunction } from "@ryoppippi/typiautil/openai";
 * import typia, { tags } from "typia";
 * import OpenAI from "openai";
 *
 * // description ( you should write in JSDOC, see README.md )
 * type Params = {
 *   id: string & tags.Type<'uint32'>;
 *   name: string & tags.MinLength<1>;
 * }
 *
 * function myFunction(args: Params) {
 *   return args;
 * }
 *
 * const client = new OpenAI({})
 *
 * const completion = await client.beta.chat.completions.parse({
 *   model: "gpt-4o-mini",
 *   tool: [typiaFunction({
 *     jsonSchema: typia.json.application<[Params]>(),
 *     validate: typia.createValidate<Params>(), // or typia.createValidateEquals<Params>()
 *     function: myFunction,
 *    })],
 *   messages: [
 *     {
 *       role: "system",
 *      content: "Extract information and return as the structured data following schema",
 *     },
 *   ],
 * });
 *
 * console.log(completion.choices[0].message.tool_calls[0].function.parsed_arguments);
 * ```
 */
export function typiaFunction<T>(
  params: TypiaFunctionParams<T>,
): AutoParseableResponseFormat<Record<string, unknown>> {
  const {
    strict,
    name,
    description: _description,
    schema,
  } = typiaJsonToOpenAIJsonSchema(params);

  const parser = (s: string) => {
    const json = JSON.parse(s);

    const result = params.validate(json);
    if (!result.success) {
      throw new Error(`${result.errors.toString()}`);
    }
    return json;
  };

  // @ts-expect-error TODO
  return makeParseableTool<unknown>(
    {
      type: "function",
      function: {
        name,
        strict,
        parameters: schema,
        description: params.description ?? _description,
      },
    },
    {
      callback: params.function,
      parser,
    },
  );
}
